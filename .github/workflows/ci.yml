name: SSH Tunnel System CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.21, 1.22]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run go fmt
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly:"
          gofmt -s -d .
          exit 1
        fi

    - name: Run go vet
      run: go vet ./...

    - name: Run tests
      run: go test -race -coverprofile=coverage.out ./...

    - name: Run benchmarks (short)
      run: go test -bench=. -benchtime=1s ./pkg/tunnel/

    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage to codecov
      if: matrix.go-version == '1.21'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21

    - name: Build for multiple platforms
      run: |
        # Linux AMD64
        GOOS=linux GOARCH=amd64 go build -o bin/tunnel-server-linux-amd64 ./cmd/tunnel-server
        GOOS=linux GOARCH=amd64 go build -o bin/tunnel-client-linux-amd64 ./cmd/tunnel-client
        GOOS=linux GOARCH=amd64 go build -o bin/tunnel-keygen-linux-amd64 ./cmd/tunnel-keygen
        
        # Linux ARM64
        GOOS=linux GOARCH=arm64 go build -o bin/tunnel-server-linux-arm64 ./cmd/tunnel-server
        GOOS=linux GOARCH=arm64 go build -o bin/tunnel-client-linux-arm64 ./cmd/tunnel-client
        GOOS=linux GOARCH=arm64 go build -o bin/tunnel-keygen-linux-arm64 ./cmd/tunnel-keygen
        
        # Windows AMD64
        GOOS=windows GOARCH=amd64 go build -o bin/tunnel-server-windows-amd64.exe ./cmd/tunnel-server
        GOOS=windows GOARCH=amd64 go build -o bin/tunnel-client-windows-amd64.exe ./cmd/tunnel-client
        GOOS=windows GOARCH=amd64 go build -o bin/tunnel-keygen-windows-amd64.exe ./cmd/tunnel-keygen
        
        # macOS AMD64
        GOOS=darwin GOARCH=amd64 go build -o bin/tunnel-server-darwin-amd64 ./cmd/tunnel-server
        GOOS=darwin GOARCH=amd64 go build -o bin/tunnel-client-darwin-amd64 ./cmd/tunnel-client
        GOOS=darwin GOARCH=amd64 go build -o bin/tunnel-keygen-darwin-amd64 ./cmd/tunnel-keygen
        
        # macOS ARM64
        GOOS=darwin GOARCH=arm64 go build -o bin/tunnel-server-darwin-arm64 ./cmd/tunnel-server
        GOOS=darwin GOARCH=arm64 go build -o bin/tunnel-client-darwin-arm64 ./cmd/tunnel-client
        GOOS=darwin GOARCH=arm64 go build -o bin/tunnel-keygen-darwin-arm64 ./cmd/tunnel-keygen

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries
        path: bin/
        retention-days: 30

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21

    - name: Build binaries
      run: |
        go build -o bin/tunnel-server ./cmd/tunnel-server
        go build -o bin/tunnel-client ./cmd/tunnel-client
        go build -o bin/tunnel-keygen ./cmd/tunnel-keygen

    - name: Setup test environment
      run: |
        mkdir -p keys configs logs
        cp configs/server.example.yaml configs/server.yaml
        cp configs/client.example.yaml configs/client.yaml

    - name: Run integration tests
      run: |
        # Run specific integration test scenarios
        go test -v -run TestTunnelReliability ./pkg/tunnel/
        go test -v -run TestLargeDataTransfer ./pkg/tunnel/
        go test -v -run TestServerRecovery ./pkg/tunnel/
        go test -v -run TestClientReconnection ./pkg/tunnel/

    - name: Run performance tests
      run: |
        go test -v -run TestTunnelTimeout ./pkg/tunnel/
        
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-no-fail -fmt sarif -out gosec.sarif ./...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec.sarif

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ secrets.DOCKER_USERNAME }}/ssh-tunnel-server
          ${{ secrets.DOCKER_USERNAME }}/ssh-tunnel-client
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push server image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deploy/Dockerfile.server
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ secrets.DOCKER_USERNAME }}/ssh-tunnel-server:${{ github.sha }},${{ secrets.DOCKER_USERNAME }}/ssh-tunnel-server:latest
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push client image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deploy/Dockerfile.client
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ secrets.DOCKER_USERNAME }}/ssh-tunnel-client:${{ github.sha }},${{ secrets.DOCKER_USERNAME }}/ssh-tunnel-client:latest
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, build, integration-test, security-scan, lint]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: binaries
        path: bin/

    - name: Create release archives
      run: |
        # Create archives for different platforms
        cd bin
        
        # Linux AMD64
        tar -czf ssh-tunnel-system-linux-amd64.tar.gz tunnel-*-linux-amd64
        
        # Linux ARM64
        tar -czf ssh-tunnel-system-linux-arm64.tar.gz tunnel-*-linux-arm64
        
        # Windows AMD64
        zip ssh-tunnel-system-windows-amd64.zip tunnel-*-windows-amd64.exe
        
        # macOS AMD64
        tar -czf ssh-tunnel-system-darwin-amd64.tar.gz tunnel-*-darwin-amd64
        
        # macOS ARM64
        tar -czf ssh-tunnel-system-darwin-arm64.tar.gz tunnel-*-darwin-arm64

    - name: Generate changelog
      id: changelog
      run: |
        echo "## Changes" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        git log --oneline --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          bin/*.tar.gz
          bin/*.zip
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
